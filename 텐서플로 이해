{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOAvJWZdnxs4S7Mqypz8Xb3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wi4hQoXGhj9Q","executionInfo":{"status":"ok","timestamp":1668050726661,"user_tz":-540,"elapsed":306,"user":{"displayName":"고다미","userId":"14264368571070937638"}},"outputId":"33feeef4-f45e-4853-bf75-3fe3a9dd4827"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow/python/compat/v2_compat.py:107: disable_resource_variables (from tensorflow.python.ops.variable_scope) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","non-resource variables are not supported in the long term\n"]}],"source":["import tensorflow.compat.v1 as tf\n","\n","tf.disable_v2_behavior()\n","in_a = tf.placeholder(dtype = tf.float32, shape = (2))\n","\n","def model(x):\n","  with tf.variable_scope(\"matmul\"):\n","    W = tf.get_variable(\"W\", initializer = tf.ones(shape = (2, 2)))\n","    b = tf.get_variable(\"b\", initializer = tf.zeros(shape = (2)))\n","    return x * W + b\n","\n","out_a = model(in_a)\n","\n","with tf.Session() as sess:\n","  sess.run(tf.global_variables_initializer())\n","  outs = sess.run([out_a],\n","                  feed_dict = {in_a : [1, 0]})\n","  writer = tf.summary.FileWriter(\"./logs/example\", sess.graph)"]},{"cell_type":"markdown","source":["# 새 섹션"],"metadata":{"id":"n_f3WqfnmedU"}},{"cell_type":"markdown","source":["오토그래프"],"metadata":{"id":"OSgX3ehhkx1U"}},{"cell_type":"code","source":["import tensorflow as tf\n","def linear_layer(x):\n","  return 3 * x +2\n","\n","@tf.function\n","def simple_nn(x):\n","  return tf.nn.relu(linear_layer(x))\n","\n","def simple_function(x):\n","  return 3 * x\n","\n","print(tf.autograph.to_code(simple_nn.python_function, experimental_optional_features=None))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9qlaDsP7kwhG","executionInfo":{"status":"ok","timestamp":1668050935656,"user_tz":-540,"elapsed":300,"user":{"displayName":"고다미","userId":"14264368571070937638"}},"outputId":"482b8952-778f-438d-ccbe-5cec93e99713"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["def tf__simple_nn(x):\n","    with ag__.FunctionScope('simple_nn', 'fscope', ag__.ConversionOptions(recursive=True, user_requested=True, optional_features=(), internal_convert_user_code=True)) as fscope:\n","        do_return = False\n","        retval_ = ag__.UndefinedReturnValue()\n","        try:\n","            do_return = True\n","            retval_ = ag__.converted_call(ag__.ld(tf).nn.relu, (ag__.converted_call(ag__.ld(linear_layer), (ag__.ld(x),), None, fscope),), None, fscope)\n","        except:\n","            do_return = False\n","            raise\n","        return fscope.ret(retval_, do_return)\n","\n"]}]},{"cell_type":"markdown","source":["#파일 업로드"],"metadata":{"id":"VVmGHeHuTT2b"}},{"cell_type":"markdown","source":["Colab에 json 라이브러리를 불러온 후, json 파일을 업로드"],"metadata":{"id":"5R4p3KONTL7D"}},{"cell_type":"code","source":["import json\n","from google.colab import files\n","uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":407},"id":"8plkGg_ChmnY","executionInfo":{"status":"error","timestamp":1668063047612,"user_tz":-540,"elapsed":98260,"user":{"displayName":"고다미","userId":"14264368571070937638"}},"outputId":"1ee8d20a-f0eb-4720-f15d-e745251194e3"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-e177c0b9-a15b-48c8-8aeb-8450024d73f7\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-e177c0b9-a15b-48c8-8aeb-8450024d73f7\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-2318f0931162>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0muploaded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36mupload\u001b[0;34m()\u001b[0m\n\u001b[1;32m     65\u001b[0m   \"\"\"\n\u001b[1;32m     66\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m   \u001b[0muploaded_files\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_upload_files\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmultiple\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m   \u001b[0;31m# Mapping from original filename to filename as saved locally.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m   \u001b[0mlocal_filenames\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36m_upload_files\u001b[0;34m(multiple)\u001b[0m\n\u001b[1;32m    144\u001b[0m   result = _output.eval_js(\n\u001b[1;32m    145\u001b[0m       'google.colab._files._uploadFiles(\"{input_id}\", \"{output_id}\")'.format(\n\u001b[0;32m--> 146\u001b[0;31m           input_id=input_id, output_id=output_id))\n\u001b[0m\u001b[1;32m    147\u001b[0m   \u001b[0mfiles\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_collections\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdefaultdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/output/_js.py\u001b[0m in \u001b[0;36meval_js\u001b[0;34m(script, ignore_result, timeout_sec)\u001b[0m\n\u001b[1;32m     38\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mignore_result\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0m_message\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_read_next_input_message\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     96\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_NOT_READY\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 97\u001b[0;31m       \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.025\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     98\u001b[0m       \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     99\u001b[0m     if (reply.get('type') == 'colab_reply' and\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":[" \n","# serialize model to JSON\n","model_json = model.to_json()\n","with open(\"model.json\", \"w\") as json_file:\n","    json_file.write(model_json)\n","# serialize weights to HDF5\n","model.save_weights(\"model.h5\")\n","print(\"Saved model to disk\")\n"," \n","# later...\n"," \n","# load json and create model\n","json_file = open('model.json', 'r')\n","loaded_model_json = json_file.read()\n","json_file.close()\n","loaded_model = model_from_json(loaded_model_json)\n","# load weights into new model\n","loaded_model.load_weights(\"model.h5\")\n","print(\"Loaded model from disk\")"],"metadata":{"id":"Zgvd_rTZUR_P"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 오류 찾기"],"metadata":{"id":"p2n1EgcKmgD0"}},{"cell_type":"code","source":["\n","# 모듈 import\n","import tensorflow as tf\n","from tensorflow.keras import datasets, layers, models, optimizers\n","\n","\n","# 신경망과 훈련\n","EPOCHS = 5\n","BATCH_SIZE = 128\n","VERBOSE = 1\n","OPTIMIZER = tf.keras.optimizers.Adam()\n","VALIDATION_SPLIT = 0.95\n","\n","IMG_ROWS, IMG_COLS = 28, 28 # 입력 이미지 차원\n","INPUT_SHAPE = (IMG_ROWS, IMG_COLS, 1)\n","NB_CLASSES = 10 # number of outputs = number of digits\n","\n","\n","\n","class LeNet:\n","\t@staticmethod\n","\tdef build(input_shape, classes):\n","\t\tmodel = models.Sequential()\n","\t\t# CONV => RELU => POOL\n","    # 첫번째 컨볼루션 단계는 ReLU 활성화와 최대 풀링\n","    # 5*5 크기를 가진 컨볼루션 신경망, 출력차원은 입력 차원과 동일 28*28\n","    # 최대 불링 작업은 계층 위로 슬라이딩\n","    # 세로 가로 2픽셀 간격으로 각 영역의 최댓값 가져오는 슬라이딩 윈도우\n","\t\tmodel.add(layers.Convolution2D(20, (5, 5), activation='relu',\n","\t\t\tinput_shape=input_shape))\n","\t\tmodel.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n","    # 두번째 컨볼루션(필터 수 증가)\n","\t\t# CONV => RELU => POOL\n","\t\tmodel.add(layers.Convolution2D(50, (5, 5), activation='relu'))\n","\t\tmodel.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n","\t\t# Flatten => RELU layers\n","\t\tmodel.add(layers.Flatten())\n","\t\tmodel.add(layers.Dense(500, activation='relu'))\n","\t\t# a softmax classifier(class에 다른 확률 추정)\n","\t\tmodel.add(layers.Dense(classes, activation=\"softmax\"))\n","\t\treturn model\n","\n","    \n","# 신경망 훈련\n","\n","# 데이터 : 훈련과 테스트 집합 사이에 섞고 분할\n","(X_train, Y_train), (X_test, Y_test) = datasets.mnist.load_data()\n","\n","# 크기 조정\n","X_train = X_train.reshape((60000, 28, 28, 1))\n","X_test = X_test.reshape((10000, 28, 28, 1))\n","\n","# 정규화\n","X_train, X_test = X_train / 255.0, X_test / 255.0\n","\n","# 형식 변환\n","X_train = X_train.astype('float32')\n","X_test = X_test.astype('float32')\n","\n","# 부류 벡터를 이진 부류 행렬로 변환\n","Y_train = tf.keras.utils.to_categorical(Y_train, NB_CLASSES)\n","Y_test = tf.keras.utils.to_categorical(Y_test, NB_CLASSES)\n","\n","# 최적화기와 모델 초기화\n","model = LeNet.build(input_shape = INPUT_SHAPE, classes = NB_CLASSES)\n","model.compile(loss = \"categorical_crossentropy\", optimizer = OPTIMIZER, metrics = [\"accuracy\"])\n","model.summary()\n","\n","# 텐서보드 사용\n","callbacks = [\n","    # 텐서보드 로그를 './logs' 디렉터리에 작성\n","    tf.keras.callbacks.TensorBoard(log_dir = './logs')\n","]\n","\n","# 적합화\n","history = model.fit(X_train, Y_train,\n","                    batch_size = BATCH_SIZE, epochs = EPOCHS,\n","                    verbose = VERBOSE, validation_split = VALIDATION_SPLIT,\n","                    callbacks = callbacks)\n","\n","\n","\n","score = model.evaluate(X_test, Y_test, verbose=VERBOSE)\n","print(\"\\nTest score:\", score[0])\n","print('Test accuracy:', score[1])\n","\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5CX7_wF1mh6u","executionInfo":{"status":"ok","timestamp":1668655293814,"user_tz":-540,"elapsed":146839,"user":{"displayName":"고다미","userId":"14264368571070937638"}},"outputId":"94992a3f-856d-4701-9b44-bcb03211cae5"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d_2 (Conv2D)           (None, 24, 24, 20)        520       \n","                                                                 \n"," max_pooling2d_2 (MaxPooling  (None, 12, 12, 20)       0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 8, 8, 50)          25050     \n","                                                                 \n"," max_pooling2d_3 (MaxPooling  (None, 4, 4, 50)         0         \n"," 2D)                                                             \n","                                                                 \n"," flatten_1 (Flatten)         (None, 800)               0         \n","                                                                 \n"," dense_2 (Dense)             (None, 500)               400500    \n","                                                                 \n"," dense_3 (Dense)             (None, 10)                5010      \n","                                                                 \n","=================================================================\n","Total params: 431,080\n","Trainable params: 431,080\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/5\n","24/24 [==============================] - 17s 712ms/step - loss: 1.1385 - accuracy: 0.6657 - val_loss: 0.4801 - val_accuracy: 0.8516\n","Epoch 2/5\n","24/24 [==============================] - 23s 990ms/step - loss: 0.3594 - accuracy: 0.8900 - val_loss: 0.3262 - val_accuracy: 0.9034\n","Epoch 3/5\n","24/24 [==============================] - 23s 992ms/step - loss: 0.2275 - accuracy: 0.9383 - val_loss: 0.2374 - val_accuracy: 0.9229\n","Epoch 4/5\n","24/24 [==============================] - 25s 1s/step - loss: 0.1585 - accuracy: 0.9543 - val_loss: 0.1986 - val_accuracy: 0.9376\n","Epoch 5/5\n","24/24 [==============================] - 23s 986ms/step - loss: 0.1125 - accuracy: 0.9713 - val_loss: 0.1567 - val_accuracy: 0.9507\n","313/313 [==============================] - 3s 10ms/step - loss: 0.1436 - accuracy: 0.9552\n","\n","Test score: 0.14355871081352234\n","Test accuracy: 0.9552000164985657\n"]}]},{"cell_type":"code","source":["데이터가 잘못된건가?"],"metadata":{"id":"cRS6X8Dc1dvT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["구글 드라이브 사용"],"metadata":{"id":"NcoMw7M7muXh"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":266},"id":"c-0Lj8n9mtsf","executionInfo":{"status":"error","timestamp":1668654282531,"user_tz":-540,"elapsed":19540,"user":{"displayName":"고다미","userId":"14264368571070937638"}},"outputId":"843437a1-84b7-4ebc-de50-a15ce8e68d91"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-1c85e710b3ce>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mmodel_json\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/model/LeNet_architecture.json'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'w'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mjson_file\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m   \u001b[0mjson_file\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_json\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"epxbeDDFjH9U"}},{"cell_type":"markdown","source":["테스트"],"metadata":{"id":"aUxs36M9m6ik"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow import keras\n","import numpy as np\n","\n","#import scipy.misc\n","#rom PIL import Image\n","from skimage.transform import resize\n","from imageio import imread\n","\n","from tensorflow.keras.models import model_from_json\n","from tensorflow.keras.optimizers import SGD\n","\n","\n","\n","# 모델 로드\n","model_architecture = '/content/drive/MyDrive/model/LeNet_architecture.json'\n","model_weights = '/content/drive/MyDrive/model/LeNet_weights.h5'\n","model = model_from_json(open(model_architecture).read())\n","model.load_weights(model_weights)\n","\n","# 이미지 로드\n","img_names = ['/content/drive/MyDrive/dataset/Mnist/number1_1.png',\n","             '/content/drive/MyDrive/dataset/Mnist/number5_1.png',\n","             '/content/drive/MyDrive/dataset/Mnist/number7_1.png',\n","             '/content/drive/MyDrive/dataset/Mnist/number8_1.png']\n","                  \n","#imgs = [np.transpose(scipy.misc.imresize(scipy.misc.imread(img_name),\n","#                                        (32, 32)), (2, 0, 1)).astype('float32')\n","#                                        for img_name in img_names]\n","\n","imgs = [resize(imread(img_name), (28, 28, 1)).astype(\"float32\") \n","        for img_name in img_names]\n","imgs = np.array(imgs)/255\n","print(\"imgs.shape:\", imgs.shape)\n","\n","# 훈련\n","optim = SGD()\n","model.compile(loss = 'categorical_crossentropy', optimizer = optim,\n","              metrics = ['accuracy'])\n","\n","# 예측\n","#predictions = model.predict_classes(imgs)\n","\n","predictions = model.predict(imgs) \n","classes = np.argmax(predictions, axis=1)\n","\n","print(\"predictions:\", predictions)\n","print(\"classes:\", classes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v8Rq7RwomwRu","executionInfo":{"status":"ok","timestamp":1668655938078,"user_tz":-540,"elapsed":2460,"user":{"displayName":"고다미","userId":"14264368571070937638"}},"outputId":"a3eb188a-0524-4af5-f6bf-e3223a5fc47b"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 24, 24, 20)        520       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 12, 12, 20)       0         \n"," )                                                               \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 8, 8, 50)          25050     \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 4, 4, 50)         0         \n"," 2D)                                                             \n","                                                                 \n"," flatten (Flatten)           (None, 800)               0         \n","                                                                 \n"," dense (Dense)               (None, 500)               400500    \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                5010      \n","                                                                 \n","=================================================================\n","Total params: 431,080\n","Trainable params: 431,080\n","Non-trainable params: 0\n","_________________________________________________________________\n","imgs.shape: (4, 28, 28, 1)\n","1/1 [==============================] - 0s 80ms/step\n","predictions: [[0.08258687 0.1029484  0.10510754 0.10100061 0.10407154 0.11692852\n","  0.09291418 0.12448917 0.07693904 0.09301404]\n"," [0.08244645 0.10271469 0.10484308 0.10082848 0.1042176  0.11734064\n","  0.09274819 0.12494699 0.07686993 0.093044  ]\n"," [0.08231881 0.10270534 0.10525069 0.10177556 0.10308775 0.11664706\n","  0.09171516 0.12652735 0.07669732 0.09327491]\n"," [0.08221992 0.10296217 0.1050908  0.1012174  0.10403606 0.11733495\n","  0.09282951 0.12434898 0.07688159 0.09307852]]\n","classes: [7 7 7 7]\n"]}]},{"cell_type":"code","source":["clear"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XxhXjcKdsPVl","executionInfo":{"status":"ok","timestamp":1668607322653,"user_tz":-540,"elapsed":481,"user":{"displayName":"고다미","userId":"14264368571070937638"}},"outputId":"323d60b5-6b37-458d-9ff1-2333faa9c5bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[H\u001b[2J"]}]}]}